syntax = "proto3";
package protobuf;
//小v请求的基本格式
message GWResult {
	enum ActionType {
		DEFAULT = 0;
		DEVICE = 1;//设备信息 上报 DeviceParam 类型
		THREAT = 2;//威胁数据上报 上报 ThreatParam 类型
		GW_INFO = 3;//网关基础信息(开机上报)，上报 GwInfoParam 类型
		SAMPLE = 4; //样本采集状态，上报 SampleParam 类型
		PROTECT = 5; //小V保护状态, 上报 GWProtectInfoParam 类型
		STRATEGY = 6; //策略状态, 上报 StrategyParam 类型
		PORTREDIRECT = 7;//端口映射, 上报 PortRedirectParam 类型
		DEPLOYER = 8;//小V负责人信息, 上报 DeployerParam 类型
		FIRMWARE = 9;//版本更新信息,上报FirwareParam类型
		FLOWSTAT = 10;//网络会话状态, 上报 FlowParam 类型
		FLOWSTRATEGYSTAT = 11; // flow策略状态, 上传 FlowStrategyParam 类型
		MONITORINFO   = 12; //监控，上报MonitorInfoParam类型
		FLOWSTATISTIC = 13; //流量统计，上报FlowStatisticParam类型
	}

	ActionType action_type = 1;//推送数据类型
	bytes param = 2;//请求参数
	string GUID = 3;//小VGUID
	string cmdID = 4;//结果返回所对应的命令ID. 用于返回Command的cmdID值及结果
}

message FlowStatisticParam {
	string interface_name = 1; //网卡名称
	uint64 rx = 2; //接收总数据，字节
	uint64 tx = 3; //上传总数据，字节
	uint32 flow_count = 4; //探测的flow的总数
	uint32 pub = 5; //本次发布的flow数量
	uint32 notlocal = 6; //不是与本地相关的flow数
	uint32 white =7; //其中属于白名单的数量
}

message MonitorInfoParam {
	message DiskOverFlow {
		string path = 1;        //盘符路径
		float disk_rate = 2;   //当前盘符占用比例
	}
	message RedisInfo {
		bool active = 1;	//Redis是否运行
		float cpu_rate = 2;    //Redis占用CPU比例
		float mem_rate = 3;    //Redis占用内存比例
		uint64 mem = 4;    //Redis占用内存（字节）
	}
	message VHaloNets {
		bool active = 1;	//VHaloNets是否运行
		float cpu_rate = 2;    //VHaloNets占用CPU比例
		float mem_rate = 3;    //VHaloNets占用内存比例
		uint64 mem = 4;    //VHaloNets占用内存（字节）
	}

	RedisInfo redis_info = 1; //监控Redis数据
	VHaloNets vhalo_info = 2; //监控引擎信息
	repeated DiskOverFlow disk_item = 3; //占用比例较大盘符，暂定80%以上
	uint64 gather_time = 4; //收集数据时间
}

enum FlowProtos {
	FP_UNKNOWN = 0; // 默认值
}

enum FlowSafetype {
	FS_UNSET = 0; // 默认值
	FS_SAFE = 1; // 会话安全
	FS_WARNING = 2; // 异常网络行为 
	FS_LEAKAGE = 3; // 用户信息泄露威胁
	FS_INVADE = 4; // 病毒/木马 TELNET SSH 远程控制等代码类入侵(包括文件还原结果)
}

enum FlowStat {
	FST_UNSET = 0; //默认值
	FST_ACTIVE = 1; // 会话进行中
	FST_FINISH = 2; // 会话完成(收到TCP完成标志)
	FST_IDLE = 3; // 会话空闲(超时)
}

message FlowParam {
	message FItem {
		uint32 hash = 1; // flow-id (int型哈希值)
		uint32 src_ip = 2; // 发起者(源)IP地址
		uint32 src_port = 3; // 发起者 端口号
		uint32 dst_ip = 4; // 接受者(目标)IP地址
		uint32 dst_port = 5; // 接受者 端口号
		FlowProtos protocol = 6; // flow的协议类型
		string flow_info = 7; // 会话信息 (url, pop3, 邮件协议 邮箱地址, 密码)
		FlowSafetype safe_type = 8; // 会话安全类型
		string safe_info = 9; // 安全类型结果(无结果为空)
		uint32 start_time = 10; // 启动时间戳
		uint32 last_seen_time = 11; // 最后探测时间戳
		uint64 src2dst_bytes = 12; // 上行流量(指src->dst方向) 单位:字节
		uint64 dst2src_bytes = 13; // 下行流量(指dst->src方向) 单位:字节
		FlowStat flow_stat = 14; // 当前会话活跃状态
	}
	
	repeated FItem flow_item = 1; // flow集合
}

message FirwareParam {
	enum Status {
		DEFAULT = 0;
		UPGRADING = 1;//当前已经有一个升级任务正在进行中
		FIRWARE_INVALID = 2; //软件包无效(boardname, arch-type不符合小V架构要求)
		URL_INVALID = 3; //url无效
		DOWNLOAD_ING  = 4; //下载中
		DOWNLOAD_FINISHED = 5; //下载成功
		DOWNLOAD_FAIL = 6; //下载失败
		MD5_ERR = 7;//软件包md5值不一致
		CHECK_OK = 8; //固件文件校验成功,开始升级,预计升级需要1分组, 期间小V不能断电
		EXEC_FAIL = 9; //小V内部执行升级固件升级命令, 返回失败结果. 注: 成功不返回结果,需小V重新上线后对照版本与升级目标是否一致.
	}

	string version = 1; //下载的软件包对应的版本　
	uint32 upgrade_timestamp = 2;//软件开始下载时间戳
	Status upgrade_status = 3; //升级状态
	uint32 timeout = 4; //　下载超时, 单位秒
}



//小v盒子的基本信息
message GwInfoParam {
	message ModuleItem {
		string name = 1;//模块名称
		string version = 2;//模块版本号
	}

	enum Type {
		DEFAULT = 0;
		VSMART = 1;
		VHALO = 2;
		VWIFI = 3;
		VENUSHALO = 4;
	}

	enum DeployMode {
		DEPLOYMODEDEFAULT = 0;
		ROUTEMODE = 1; //路由模式
		SWITCHMODE = 2;//透传(交换)模式
	}

	string version = 1;//软件版本
	uint32 start_time = 2;//启动时间
	string firmware_version = 3;//固件版本
	string hardware_model= 4;//硬件型号
	repeated ModuleItem module = 5;//模块信息
	string supply_id = 6;//渠道id
	string up_router_ip = 7;//上级路由ip
	string ip = 8;//盒子ip
	Type type = 9;//盒子类型
	string mac = 10;//盒子mac
	uint32 timestamp = 11;//时间戳
	int32 hb_timeout = 12; //心跳超时(秒),用于显示小V在线/离线
	DeployMode deploy_mode = 13; //网关部署模式
	uint32 flow_idle_time_slot = 14; //会话flow在时间段间隔之后做IDLE处理.
}

//小v下属关联设备（终端）
message DeviceParam{
	message Item{
		string ip = 1;//ip地址
		string mac = 2;//mac地址
		string name = 3;//设备名称
		string trademark = 4;//品牌名称
		bool is_online = 5;//是否在线
		uint32 last_online = 6;//最后在线时间戳
		bool internet_switch = 7;//是否允许联网
		bool protect_switch = 8;//是否受小V保护
		bool lan_visit_switch = 9;//是否可以访问内网,false:访问关闭. true:访问开启
	}

	repeated Item device_item = 1;
}

//威胁类型
message ThreatParam{
	//威胁事件object,
	message Item{
		enum Type {
			DEFAULT = 0;
			SITE = 1;//网内设备访问异常URL/IP(URL) content:url
			IP = 2;//网内设备访问异常URL/IP（IP） 目标(异常)IP为: dst_ip, content:空
			DNSHIJACK = 3;//DNS劫持 被劫持的域名(url) content:url, dst_ip:劫持后的目标IP
			UDEVICEWHITEIP = 4;//非法设备访问(IP)白名单 目标IP为: dst_ip, content:空
			UDEVICEWHITESITE = 5;//非法设备访问(URL)白名单 content:url
			UDEVICEBLACKIP = 6; //非法设备访问异常URL/IP(IP) 目标(异常)IP为: dst_ip content:空
			UDEVICEBLACKSITE = 7;//非法设备访问异常URL/IP(URL) content:url
			LANINTRUSION = 8;//网内设备非法访问内网 入侵目标IP为: dst_ip, content:目标设备mac地址
			UDEVLANINTRUSION = 9; //非法设备访问内网 入侵目标IP为: dst_ip, content:目标设备mac地址
		}

		enum Status {
			UNKNOWN = 0;
			FOUND = 1;//新发现
			PREVENT = 2;//已阻止(告警并拦截)
			WARNING = 3;//已(仅)警告
		}

		string src_mac = 1;//发起网络请求的设备mac
		Type threat_type = 2;//威胁类型

		string content = 3;//威胁内容，根据类型传, 包括:url/mac
		Status threat_status = 4;//威胁处理状态

		uint32 attact_time = 5;//威胁发现时间
		string src_ip = 6;//源ip
		string dst_ip = 7;//目标ip
	}

	repeated Item threat_item = 1;//威胁项
}

// 样本采集任务状态
message SampleParam {
	enum Status {
		STATUSDEFAULT = 0;
		COLLECTING = 1;//采集中
		COLLECT_OK = 2;//采集已完成
		COLLECT_FAILED = 3;//采集失败
	}

	message Item {
		string sm = 6;//源终端mac
		string sip = 7;//源IP
		uint32 sp = 8;//源端口号
		string dip = 9;//目标IP
		uint32 dp = 10;//目标端口号
		string u = 12;//目标url, 可能会为空
		string tm = 13;//访问时间
	}

	string id = 1; //采集任务ID
	uint32 start_time = 2;//开始采集时间
	uint32 time_remain = 3;//采集时长时间(单位 秒)
	Status status = 4;//采集状态
	repeated Item sample_item = 5;  //采集样本结果, 当采集状态为 COLLECTING 时, 该值为空
	uint32 timeout = 6; // 采集超时, 单位秒. (超时时间内没有 COLLECTING 且未上报 COLLECT_OK 状态, 则采集失败)
}

// 小V盒子全局保护状态信息
message GWProtectInfoParam {
	enum Status {
		DEFAULT = 0;
		PROTECTING = 1;
		UNPROTECTED = 2;
	}

	Status protect_status = 1; // 保护状态
}

// 小V 当前策略的状态
message StrategyParam {
	enum Type {
		TYPEDEFAULT = 0;
		WHITEMODE =1;//白名单模式
		BLACKMODE =2;//黑名单模式
	}
	enum HandleMode {
		MODEDEFAULT = 0;
		PREVENTWARNING = 1;//阻断并告警
		WARNING = 2;//警告
	}
	string strategy_id = 1;//策略id
	HandleMode handle_mode = 2;//处理方式
	Type defense_type = 3;//策略模式
	bool enable = 4;//策略是否启用
}

// 小V 当前策略的状态
message FlowStrategyParam {
	enum Type {
        FLWOTYPEDEFAULT = 0;
        FLWOWHITEMODE =1;//白名单模式
        FLWOBLACKMODE =2;//黑名单模式
    }
	enum HandleMode {
		MODEDEFAULT = 0;
		PREVENTWARNING = 1;//阻断并告警
		WARNING = 2;//警告
	}
	string flow_strategy_id = 1;//策略id
	HandleMode handle_mode = 2;//处理方式
	Type defense_type = 3;//策略模式
	bool enable = 4;//策略是否启用
}

// 端口映射状态
message PortRedirectParam {
	message Item {
		enum Protocol { //端口映射网络协议类型
						UNSET = 0;
						UDP = 1;
						TCP = 2;
						ALL = 3; //支持所有协议, 默认
		}

		string src_port = 1;//外部端口 索引
		string dest_port = 2;//内部端口
		string dest_ip = 3;//映射目标IP:内部终端IP地址
		bool switch = 4;//是否开启端口映射, false: 关; true: 开
		Protocol proto = 5;//端口映射的网络协议类型
		// string id = 5;//端口映射规则ID
	}

	repeated Item port_redirect = 10; //端口映射表
}

// 网关昵称和部署负责人信息
message DeployerParam {
	string name = 1;//小V负责人姓名
	string phone = 2;//小V负责人电话
	string dev_name = 3;//小V部署时设置的昵称
}
